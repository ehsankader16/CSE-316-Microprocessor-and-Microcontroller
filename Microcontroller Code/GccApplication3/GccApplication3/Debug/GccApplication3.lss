
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800060  00800060  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ea  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000547  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000251  00000000  00000000  00000d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000335  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 38       	cpi	r26, 0x82	; 130
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
char in = 0, out;
int controls[16];

int main(void)
{
	DDRB = 0x00; // setting PORTB as input
  7c:	17 ba       	out	0x17, r1	; 23
	DDRD = 0xFF; 
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF; // PORTA AND PORTD are instruction outputs
  82:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // PORTC has PC+1
  84:	84 bb       	out	0x14, r24	; 20
	controls[0] = 0b011000000001;
  86:	e1 e6       	ldi	r30, 0x61	; 97
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	96 e0       	ldi	r25, 0x06	; 6
  8e:	91 83       	std	Z+1, r25	; 0x01
  90:	80 83       	st	Z, r24
	controls[1] = 0b001000001010;
  92:	8a e0       	ldi	r24, 0x0A	; 10
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	93 83       	std	Z+3, r25	; 0x03
  98:	82 83       	std	Z+2, r24	; 0x02
	controls[2] = 0b000000010001;
  9a:	81 e1       	ldi	r24, 0x11	; 17
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	95 83       	std	Z+5, r25	; 0x05
  a0:	84 83       	std	Z+4, r24	; 0x04
	controls[3] = 0b001000001000;
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	97 83       	std	Z+7, r25	; 0x07
  a8:	86 83       	std	Z+6, r24	; 0x06
	controls[4] = 0b000000100001;
  aa:	81 e2       	ldi	r24, 0x21	; 33
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	91 87       	std	Z+9, r25	; 0x09
  b0:	80 87       	std	Z+8, r24	; 0x08
	controls[5] = 0b011000000010;
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	96 e0       	ldi	r25, 0x06	; 6
  b6:	93 87       	std	Z+11, r25	; 0x0b
  b8:	82 87       	std	Z+10, r24	; 0x0a
	controls[6] = 0b000010001000;
  ba:	88 e8       	ldi	r24, 0x88	; 136
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	95 87       	std	Z+13, r25	; 0x0d
  c0:	84 87       	std	Z+12, r24	; 0x0c
	controls[7] = 0b001000001110;
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	97 87       	std	Z+15, r25	; 0x0f
  c8:	86 87       	std	Z+14, r24	; 0x0e
	controls[8] = 0b011000000011;
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	96 e0       	ldi	r25, 0x06	; 6
  ce:	91 8b       	std	Z+17, r25	; 0x11
  d0:	80 8b       	std	Z+16, r24	; 0x10
	controls[9] = 0b001000001011;
  d2:	8b e0       	ldi	r24, 0x0B	; 11
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	93 8b       	std	Z+19, r25	; 0x13
  d8:	82 8b       	std	Z+18, r24	; 0x12
	controls[10] = 0b001101001000;
  da:	88 e4       	ldi	r24, 0x48	; 72
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	95 8b       	std	Z+21, r25	; 0x15
  e0:	84 8b       	std	Z+20, r24	; 0x14
	controls[11] = 0b011000000000;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	96 e0       	ldi	r25, 0x06	; 6
  e6:	97 8b       	std	Z+23, r25	; 0x17
  e8:	86 8b       	std	Z+22, r24	; 0x16
	controls[12] = 0b001000001101;
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	92 e0       	ldi	r25, 0x02	; 2
  ee:	91 8f       	std	Z+25, r25	; 0x19
  f0:	80 8f       	std	Z+24, r24	; 0x18
	controls[13] = 0b001000001001;
  f2:	89 e0       	ldi	r24, 0x09	; 9
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	93 8f       	std	Z+27, r25	; 0x1b
  f8:	82 8f       	std	Z+26, r24	; 0x1a
	controls[14] = 0b100000000000;
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	98 e0       	ldi	r25, 0x08	; 8
  fe:	95 8f       	std	Z+29, r25	; 0x1d
 100:	84 8f       	std	Z+28, r24	; 0x1c
	controls[15] = 0b011000000100;
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	96 e0       	ldi	r25, 0x06	; 6
 106:	97 8f       	std	Z+31, r25	; 0x1f
 108:	86 8f       	std	Z+30, r24	; 0x1e
	

    /* Replace with your application code */
    while (1) 
    {
		in = 0x0F & PINB;
 10a:	e6 b3       	in	r30, 0x16	; 22
 10c:	ef 70       	andi	r30, 0x0F	; 15
 10e:	e0 93 60 00 	sts	0x0060, r30	; 0x800060 <__DATA_REGION_ORIGIN__>
		char lower = (char) controls[(int) in];
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	ef 59       	subi	r30, 0x9F	; 159
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	90 81       	ld	r25, Z
 11e:	81 81       	ldd	r24, Z+1	; 0x01
		char upper = (char) (controls[(int) in] >> 8);
		PORTA = lower;
 120:	9b bb       	out	0x1b, r25	; 27
		PORTD = upper;
 122:	82 bb       	out	0x12, r24	; 18
 124:	f2 cf       	rjmp	.-28     	; 0x10a <main+0x8e>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
