
ALU MIPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c0  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000513  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024d  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014b  00000000  00000000  0000122d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define SLL 5
#define SRL 6

int main(void)
{
	DDRD = 0x00; // setting port D as input of OPCODE
  6c:	11 ba       	out	0x11, r1	; 17
	DDRA = 0xFF; // setting port A as input of registers (4LSB = reg1, 4MSB = reg2)
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
				 // in case of shift, 4MSB = shift amount
	DDRB = 0x00; // output of ALU (least 4 significant bits are result)
  72:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;
  74:	84 bb       	out	0x14, r24	; 20
    /* Replace with your application code */
    while (1) 
    {
		char opcode = PIND & (0b00000111);
  76:	90 b3       	in	r25, 0x10	; 16
  78:	97 70       	andi	r25, 0x07	; 7
		char reg1 = PINB & 0b00001111;
  7a:	86 b3       	in	r24, 0x16	; 22
  7c:	8f 70       	andi	r24, 0x0F	; 15
		char reg2 = PINB & 0b11110000;
  7e:	26 b3       	in	r18, 0x16	; 22
		reg2 = reg2 >> 4;
  80:	42 2f       	mov	r20, r18
  82:	42 95       	swap	r20
  84:	4f 70       	andi	r20, 0x0F	; 15
		char result = 0;
		if (opcode == ADD)
  86:	91 11       	cpse	r25, r1
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
		{
			result = reg1 + reg2;
  8a:	84 0f       	add	r24, r20
  8c:	24 c0       	rjmp	.+72     	; 0xd6 <main+0x6a>
		}
		
		else if (opcode == SUB)
  8e:	91 30       	cpi	r25, 0x01	; 1
  90:	11 f4       	brne	.+4      	; 0x96 <main+0x2a>
		{
			result = reg1 - reg2;
  92:	84 1b       	sub	r24, r20
  94:	20 c0       	rjmp	.+64     	; 0xd6 <main+0x6a>
		}
		
		else if (opcode == AND)
  96:	93 30       	cpi	r25, 0x03	; 3
  98:	11 f4       	brne	.+4      	; 0x9e <main+0x32>
		{
			result = reg1 & reg2;
  9a:	84 23       	and	r24, r20
  9c:	1c c0       	rjmp	.+56     	; 0xd6 <main+0x6a>
		}
		
		else if (opcode == OR)
  9e:	92 30       	cpi	r25, 0x02	; 2
  a0:	11 f4       	brne	.+4      	; 0xa6 <main+0x3a>
		{
			result = reg1 | reg2;
  a2:	84 2b       	or	r24, r20
  a4:	18 c0       	rjmp	.+48     	; 0xd6 <main+0x6a>
		}
		
		else if (opcode == NOR)
  a6:	94 30       	cpi	r25, 0x04	; 4
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x44>
		{
			result = ~(reg1 | reg2);
  aa:	84 2b       	or	r24, r20
  ac:	80 95       	com	r24
  ae:	13 c0       	rjmp	.+38     	; 0xd6 <main+0x6a>
		}
		
		else if (opcode == SLL)
  b0:	95 30       	cpi	r25, 0x05	; 5
  b2:	29 f4       	brne	.+10     	; 0xbe <main+0x52>
		{
			result = reg1 << reg2;
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x4c>
  b6:	88 0f       	add	r24, r24
  b8:	4a 95       	dec	r20
  ba:	ea f7       	brpl	.-6      	; 0xb6 <main+0x4a>
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <main+0x6a>
		}
		
		else if (opcode == SRL)
  be:	96 30       	cpi	r25, 0x06	; 6
  c0:	49 f4       	brne	.+18     	; 0xd4 <main+0x68>
		{
			result = reg1 >> reg2;
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	c9 01       	movw	r24, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x62>
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	4a 95       	dec	r20
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x5e>
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x6a>
    {
		char opcode = PIND & (0b00000111);
		char reg1 = PINB & 0b00001111;
		char reg2 = PINB & 0b11110000;
		reg2 = reg2 >> 4;
		char result = 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
		
		else if (opcode == SRL)
		{
			result = reg1 >> reg2;
		}
		PORTA = result;
  d6:	8b bb       	out	0x1b, r24	; 27
		PORTC = !result;
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	81 11       	cpse	r24, r1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	95 bb       	out	0x15, r25	; 21
    }
  e0:	ca cf       	rjmp	.-108    	; 0x76 <main+0xa>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
