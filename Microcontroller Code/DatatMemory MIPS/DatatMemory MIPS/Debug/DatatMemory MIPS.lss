
DatatMemory MIPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  0000016c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005fd  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052d  00000000  00000000  000007f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026b  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000142d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

char data[32];

int main(void)
{
	DDRA = 0x00;	// address [A7-A4] data [A3-A0]
  7c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0b11111000;	// clk [B0] memwrite [B1] memread [B2]	read data from mem [B7-B4]
  7e:	88 ef       	ldi	r24, 0xF8	; 248
  80:	87 bb       	out	0x17, r24	; 23
	unsigned char memRead = 0;
	unsigned char memWrite = 0;
	unsigned char address = 0;
	unsigned char recentClk = 0;
	char incomingData = 0;
	int activated = 0;
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
	DDRB = 0b11111000;	// clk [B0] memwrite [B1] memread [B2]	read data from mem [B7-B4]
	
	unsigned char memRead = 0;
	unsigned char memWrite = 0;
	unsigned char address = 0;
	unsigned char recentClk = 0;
  86:	90 e0       	ldi	r25, 0x00	; 0
	int activated = 0;
	
    /* Replace with your application code */
    while (1) 
    {
		memWrite = PINB;
  88:	26 b3       	in	r18, 0x16	; 22
		memRead = PINB;
  8a:	36 b3       	in	r19, 0x16	; 22
		
		if (recentClk == 0 && (PINB & 0b00000001)) {
  8c:	91 11       	cpse	r25, r1
  8e:	07 c0       	rjmp	.+14     	; 0x9e <main+0x22>
  90:	b0 9b       	sbis	0x16, 0	; 22
  92:	05 c0       	rjmp	.+10     	; 0x9e <main+0x22>
			activated = 1;
			recentClk = PINB & 0b00000001;
  94:	96 b3       	in	r25, 0x16	; 22
  96:	91 70       	andi	r25, 0x01	; 1
    {
		memWrite = PINB;
		memRead = PINB;
		
		if (recentClk == 0 && (PINB & 0b00000001)) {
			activated = 1;
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	70 e0       	ldi	r23, 0x00	; 0
			recentClk = PINB & 0b00000001;
  9c:	08 c0       	rjmp	.+16     	; 0xae <main+0x32>
		} else if ((recentClk == 1) && ((PINB & 0b00000001) == 0)) {
  9e:	91 30       	cpi	r25, 0x01	; 1
  a0:	31 f4       	brne	.+12     	; 0xae <main+0x32>
  a2:	b0 99       	sbic	0x16, 0	; 22
  a4:	04 c0       	rjmp	.+8      	; 0xae <main+0x32>
			activated = 0;
			recentClk = PINB & 0b00000001;
  a6:	96 b3       	in	r25, 0x16	; 22
  a8:	91 70       	andi	r25, 0x01	; 1
		
		if (recentClk == 0 && (PINB & 0b00000001)) {
			activated = 1;
			recentClk = PINB & 0b00000001;
		} else if ((recentClk == 1) && ((PINB & 0b00000001) == 0)) {
			activated = 0;
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
			recentClk = PINB & 0b00000001;
		}
		
		
		
		address = PINA >> 4;
  ae:	e9 b3       	in	r30, 0x19	; 25
  b0:	e2 95       	swap	r30
  b2:	ef 70       	andi	r30, 0x0F	; 15
		incomingData = PINA & 0x0F;
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	48 2f       	mov	r20, r24
  b8:	4f 70       	andi	r20, 0x0F	; 15
		if ((incomingData & 0b00001000) && activated){
  ba:	83 ff       	sbrs	r24, 3
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <main+0x4a>
  be:	61 15       	cp	r22, r1
  c0:	71 05       	cpc	r23, r1
  c2:	09 f0       	breq	.+2      	; 0xc6 <main+0x4a>
			incomingData |= 0b11110000;
  c4:	40 6f       	ori	r20, 0xF0	; 240
		}
		
		if ((memWrite & 0b00000010) && activated) {
  c6:	21 ff       	sbrs	r18, 1
  c8:	08 c0       	rjmp	.+16     	; 0xda <main+0x5e>
  ca:	61 15       	cp	r22, r1
  cc:	71 05       	cpc	r23, r1
  ce:	29 f0       	breq	.+10     	; 0xda <main+0x5e>
			data[address] = incomingData;
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	e0 5a       	subi	r30, 0xA0	; 160
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	40 83       	st	Z, r20
  d8:	d7 cf       	rjmp	.-82     	; 0x88 <main+0xc>
			
		}
		
		else if ((memRead & 0b00000100) && activated) { 
  da:	32 ff       	sbrs	r19, 2
  dc:	d5 cf       	rjmp	.-86     	; 0x88 <main+0xc>
  de:	61 15       	cp	r22, r1
  e0:	71 05       	cpc	r23, r1
  e2:	91 f2       	breq	.-92     	; 0x88 <main+0xc>
			PORTB = data[address] << 4;
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e0 5a       	subi	r30, 0xA0	; 160
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 81       	ld	r24, Z
  ec:	82 95       	swap	r24
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	ca cf       	rjmp	.-108    	; 0x88 <main+0xc>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
